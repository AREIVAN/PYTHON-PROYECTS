[
    {
        "label": "random",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "random",
        "description": "random",
        "detail": "random",
        "documentation": {}
    },
    {
        "label": "requests",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "requests",
        "description": "requests",
        "detail": "requests",
        "documentation": {}
    },
    {
        "label": "tkinter",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "tkinter",
        "description": "tkinter",
        "detail": "tkinter",
        "documentation": {}
    },
    {
        "label": "messagebox",
        "importPath": "tkinter",
        "description": "tkinter",
        "isExtraImport": true,
        "detail": "tkinter",
        "documentation": {}
    },
    {
        "label": "Workbook",
        "importPath": "openpyxl",
        "description": "openpyxl",
        "isExtraImport": true,
        "detail": "openpyxl",
        "documentation": {}
    },
    {
        "label": "load_workbook",
        "importPath": "openpyxl",
        "description": "openpyxl",
        "isExtraImport": true,
        "detail": "openpyxl",
        "documentation": {}
    },
    {
        "label": "re",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "re",
        "description": "re",
        "detail": "re",
        "documentation": {}
    },
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "cv2",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "cv2",
        "description": "cv2",
        "detail": "cv2",
        "documentation": {}
    },
    {
        "label": "MINIMO",
        "kind": 5,
        "importPath": "3basicos.adivinaelnumero",
        "description": "3basicos.adivinaelnumero",
        "peekOfCode": "MINIMO = 1\ndificultad = input(\"Selecciona la dificultad (F,M,D): \")\nif dificultad == \"F\":\n    maximo = 10\nelif dificultad == \"M\":\n    maximo = 50\nelif dificultad == \"D\":\n    maximo = 100\nelif dificultad not in \"FMD\":\n    print(\"dificultad no valida\")",
        "detail": "3basicos.adivinaelnumero",
        "documentation": {}
    },
    {
        "label": "dificultad",
        "kind": 5,
        "importPath": "3basicos.adivinaelnumero",
        "description": "3basicos.adivinaelnumero",
        "peekOfCode": "dificultad = input(\"Selecciona la dificultad (F,M,D): \")\nif dificultad == \"F\":\n    maximo = 10\nelif dificultad == \"M\":\n    maximo = 50\nelif dificultad == \"D\":\n    maximo = 100\nelif dificultad not in \"FMD\":\n    print(\"dificultad no valida\")\n    maximo = 10",
        "detail": "3basicos.adivinaelnumero",
        "documentation": {}
    },
    {
        "label": "intentos",
        "kind": 5,
        "importPath": "3basicos.adivinaelnumero",
        "description": "3basicos.adivinaelnumero",
        "peekOfCode": "intentos = 0\nnumero_azar = random.randint(MINIMO, maximo)\nwhile True:\n    intento_usuario = int(\n        input(f\"Introdue un numero entre el 1 y el {maximo} : \"))\n    intentos += 1\n    if intento_usuario > numero_azar:\n        print(\"Te pasaste, el numero es mas pequeño que \" + str(intento_usuario))\n    elif intento_usuario < numero_azar:\n        print(\"Te quedaste corto, el numero es mas grande que \" +",
        "detail": "3basicos.adivinaelnumero",
        "documentation": {}
    },
    {
        "label": "numero_azar",
        "kind": 5,
        "importPath": "3basicos.adivinaelnumero",
        "description": "3basicos.adivinaelnumero",
        "peekOfCode": "numero_azar = random.randint(MINIMO, maximo)\nwhile True:\n    intento_usuario = int(\n        input(f\"Introdue un numero entre el 1 y el {maximo} : \"))\n    intentos += 1\n    if intento_usuario > numero_azar:\n        print(\"Te pasaste, el numero es mas pequeño que \" + str(intento_usuario))\n    elif intento_usuario < numero_azar:\n        print(\"Te quedaste corto, el numero es mas grande que \" +\n              str(intento_usuario))",
        "detail": "3basicos.adivinaelnumero",
        "documentation": {}
    },
    {
        "label": "numero1",
        "kind": 5,
        "importPath": "3basicos.calculadora",
        "description": "3basicos.calculadora",
        "peekOfCode": "numero1 = int(input(\"Introduce el primer numero: \"))\nnumero2 = int(input(\"introduce el segundo numero: \"))\noperaciones_posibles = [\"suma\", \"resta\", \"multiplicacion\", \"division\"]\noperacion = input(\"Introduce la operacion que quieres realizar: \")\ntry:\n    if operacion == \"suma\":\n        print(numero1 + numero2)\n    elif operacion == \"resta\":\n        print(numero1 - numero2)\n    elif operacion == \"multiplicacion\":",
        "detail": "3basicos.calculadora",
        "documentation": {}
    },
    {
        "label": "numero2",
        "kind": 5,
        "importPath": "3basicos.calculadora",
        "description": "3basicos.calculadora",
        "peekOfCode": "numero2 = int(input(\"introduce el segundo numero: \"))\noperaciones_posibles = [\"suma\", \"resta\", \"multiplicacion\", \"division\"]\noperacion = input(\"Introduce la operacion que quieres realizar: \")\ntry:\n    if operacion == \"suma\":\n        print(numero1 + numero2)\n    elif operacion == \"resta\":\n        print(numero1 - numero2)\n    elif operacion == \"multiplicacion\":\n        print(numero1 * numero2)",
        "detail": "3basicos.calculadora",
        "documentation": {}
    },
    {
        "label": "operaciones_posibles",
        "kind": 5,
        "importPath": "3basicos.calculadora",
        "description": "3basicos.calculadora",
        "peekOfCode": "operaciones_posibles = [\"suma\", \"resta\", \"multiplicacion\", \"division\"]\noperacion = input(\"Introduce la operacion que quieres realizar: \")\ntry:\n    if operacion == \"suma\":\n        print(numero1 + numero2)\n    elif operacion == \"resta\":\n        print(numero1 - numero2)\n    elif operacion == \"multiplicacion\":\n        print(numero1 * numero2)\n    elif operacion == \"division\":",
        "detail": "3basicos.calculadora",
        "documentation": {}
    },
    {
        "label": "operacion",
        "kind": 5,
        "importPath": "3basicos.calculadora",
        "description": "3basicos.calculadora",
        "peekOfCode": "operacion = input(\"Introduce la operacion que quieres realizar: \")\ntry:\n    if operacion == \"suma\":\n        print(numero1 + numero2)\n    elif operacion == \"resta\":\n        print(numero1 - numero2)\n    elif operacion == \"multiplicacion\":\n        print(numero1 * numero2)\n    elif operacion == \"division\":\n        print(numero1 / numero2)",
        "detail": "3basicos.calculadora",
        "documentation": {}
    },
    {
        "label": "movimientos",
        "kind": 5,
        "importPath": "3basicos.piedrapapeltijera",
        "description": "3basicos.piedrapapeltijera",
        "peekOfCode": "movimientos = [\"piedra\", \"papel\", \"tijera\"]\nmovimiento_ia = random.choice(movimientos)\nmovimiento_usuario = input(\"Introduce tu movimiento: (piedra,papel,tijera) \")\nif movimiento_usuario not in movimientos:\n    print(\"Movimiento no válido\")\n    quit()\nprint(F\"has elegido {movimiento_usuario}\")\nprint(F\"ha elegido {movimiento_ia}\")\nif movimiento_usuario == \"piedra\":\n    if movimiento_ia == \"papel\":",
        "detail": "3basicos.piedrapapeltijera",
        "documentation": {}
    },
    {
        "label": "movimiento_ia",
        "kind": 5,
        "importPath": "3basicos.piedrapapeltijera",
        "description": "3basicos.piedrapapeltijera",
        "peekOfCode": "movimiento_ia = random.choice(movimientos)\nmovimiento_usuario = input(\"Introduce tu movimiento: (piedra,papel,tijera) \")\nif movimiento_usuario not in movimientos:\n    print(\"Movimiento no válido\")\n    quit()\nprint(F\"has elegido {movimiento_usuario}\")\nprint(F\"ha elegido {movimiento_ia}\")\nif movimiento_usuario == \"piedra\":\n    if movimiento_ia == \"papel\":\n        print(\"Perdiste\")",
        "detail": "3basicos.piedrapapeltijera",
        "documentation": {}
    },
    {
        "label": "movimiento_usuario",
        "kind": 5,
        "importPath": "3basicos.piedrapapeltijera",
        "description": "3basicos.piedrapapeltijera",
        "peekOfCode": "movimiento_usuario = input(\"Introduce tu movimiento: (piedra,papel,tijera) \")\nif movimiento_usuario not in movimientos:\n    print(\"Movimiento no válido\")\n    quit()\nprint(F\"has elegido {movimiento_usuario}\")\nprint(F\"ha elegido {movimiento_ia}\")\nif movimiento_usuario == \"piedra\":\n    if movimiento_ia == \"papel\":\n        print(\"Perdiste\")\nelif movimiento_ia == \"tijera\":",
        "detail": "3basicos.piedrapapeltijera",
        "documentation": {}
    },
    {
        "label": "arr",
        "kind": 5,
        "importPath": "algoritmos de ordenamiento.por_insercion",
        "description": "algoritmos de ordenamiento.por_insercion",
        "peekOfCode": "arr = [5, 3, 4, 8, 7, 5, 1, 2, 3, 10, 92, 2]\nprint(\"Arreglo original:\", arr)\n# Algoritmo de ordenamiento por inserción\nfor j in range(1, len(arr)):\n    # Elemento actual a insertar en la parte ordenada del arreglo\n    actual = arr[j]\n    i = j - 1\n    # Desplazar elementos de la parte ordenada del arreglo hacia la derecha\n    # para hacer espacio para el elemento actual\n    while i >= 0 and arr[i] > actual:",
        "detail": "algoritmos de ordenamiento.por_insercion",
        "documentation": {}
    },
    {
        "label": "URL",
        "kind": 5,
        "importPath": "api.apipokemon",
        "description": "api.apipokemon",
        "peekOfCode": "URL = \"https://pokeapi.co/api/v2/pokemon/\"\npokemon = input(\"Escribe el nombre el pokemon: \")\nrespuesta = requests.get(URL + pokemon)\ndatos = respuesta.json()\nprint(f\"-----Movimientos de{pokemon}:-----\")\nfor move in datos[\"moves\"]:\n    print(move[\"move\"][\"name\"])\nprint(f\"-----tipos de{pokemon}:-----\")\nfor type in datos[\"types\"]:\n    print(type[\"type\"][\"name\"])",
        "detail": "api.apipokemon",
        "documentation": {}
    },
    {
        "label": "pokemon",
        "kind": 5,
        "importPath": "api.apipokemon",
        "description": "api.apipokemon",
        "peekOfCode": "pokemon = input(\"Escribe el nombre el pokemon: \")\nrespuesta = requests.get(URL + pokemon)\ndatos = respuesta.json()\nprint(f\"-----Movimientos de{pokemon}:-----\")\nfor move in datos[\"moves\"]:\n    print(move[\"move\"][\"name\"])\nprint(f\"-----tipos de{pokemon}:-----\")\nfor type in datos[\"types\"]:\n    print(type[\"type\"][\"name\"])",
        "detail": "api.apipokemon",
        "documentation": {}
    },
    {
        "label": "respuesta",
        "kind": 5,
        "importPath": "api.apipokemon",
        "description": "api.apipokemon",
        "peekOfCode": "respuesta = requests.get(URL + pokemon)\ndatos = respuesta.json()\nprint(f\"-----Movimientos de{pokemon}:-----\")\nfor move in datos[\"moves\"]:\n    print(move[\"move\"][\"name\"])\nprint(f\"-----tipos de{pokemon}:-----\")\nfor type in datos[\"types\"]:\n    print(type[\"type\"][\"name\"])",
        "detail": "api.apipokemon",
        "documentation": {}
    },
    {
        "label": "datos",
        "kind": 5,
        "importPath": "api.apipokemon",
        "description": "api.apipokemon",
        "peekOfCode": "datos = respuesta.json()\nprint(f\"-----Movimientos de{pokemon}:-----\")\nfor move in datos[\"moves\"]:\n    print(move[\"move\"][\"name\"])\nprint(f\"-----tipos de{pokemon}:-----\")\nfor type in datos[\"types\"]:\n    print(type[\"type\"][\"name\"])",
        "detail": "api.apipokemon",
        "documentation": {}
    },
    {
        "label": "guardar_datos",
        "kind": 2,
        "importPath": "formulario1.formulas",
        "description": "formulario1.formulas",
        "peekOfCode": "def guardar_datos():\n    nombre = entry_nombre.get()\n    edad = entry_edad.get()\n    mail = entry_mail.get()\n    telefono = entry_telefono.get()\n    direccion = entry_direccion.get()\n    if not nombre or not edad or not mail or not telefono or not direccion:\n        messagebox.showwarning(\n            \"Campos vacios\", \"Por favor llene todos los campos\")\n        return",
        "detail": "formulario1.formulas",
        "documentation": {}
    },
    {
        "label": "nombre_archivo",
        "kind": 5,
        "importPath": "formulario1.formulas",
        "description": "formulario1.formulas",
        "peekOfCode": "nombre_archivo = 'datos.xlsx'\nif os.path.exists(nombre_archivo):\n    wb = load_workbook(nombre_archivo)\n    ws = wb.active\n# crear libro excel\nelse:\n    wb = Workbook()\n    ws = wb.active\n    ws.append([\"Nombre\", \"Edad\", \"Email\", \"Telefono\", \"Direccion\"])\ndef guardar_datos():",
        "detail": "formulario1.formulas",
        "documentation": {}
    },
    {
        "label": "root",
        "kind": 5,
        "importPath": "formulario1.formulas",
        "description": "formulario1.formulas",
        "peekOfCode": "root = tk.Tk()\nroot.title(\"Formulario de entrada de datos\")\nroot.configure(bg='#4B6587')  # fondo de la app\nlabel_style = {\"bg\": '#4B6587', \"fg\": \"white\"}  # fondo de las letras\nentry_style = {\"bg\": '#D3D3D3', \"fg\": \"black\"}  # fondo de la casilla\n# letras de nombre\nlabel_nombre = tk.Label(root, text=\"Nombre\", **label_style)\nlabel_nombre.grid(row=0, column=0, padx=10, pady=5)\n# insertar nombre\n# primero la entrada * estilo creado antes",
        "detail": "formulario1.formulas",
        "documentation": {}
    },
    {
        "label": "label_style",
        "kind": 5,
        "importPath": "formulario1.formulas",
        "description": "formulario1.formulas",
        "peekOfCode": "label_style = {\"bg\": '#4B6587', \"fg\": \"white\"}  # fondo de las letras\nentry_style = {\"bg\": '#D3D3D3', \"fg\": \"black\"}  # fondo de la casilla\n# letras de nombre\nlabel_nombre = tk.Label(root, text=\"Nombre\", **label_style)\nlabel_nombre.grid(row=0, column=0, padx=10, pady=5)\n# insertar nombre\n# primero la entrada * estilo creado antes\nentry_nombre = tk.Entry(root, **entry_style)\nentry_nombre.grid(row=0, column=1, padx=10, pady=5)  # grid y es donde ira\nlabel_edad = tk.Label(root, text=\"Edad\", **label_style)",
        "detail": "formulario1.formulas",
        "documentation": {}
    },
    {
        "label": "entry_style",
        "kind": 5,
        "importPath": "formulario1.formulas",
        "description": "formulario1.formulas",
        "peekOfCode": "entry_style = {\"bg\": '#D3D3D3', \"fg\": \"black\"}  # fondo de la casilla\n# letras de nombre\nlabel_nombre = tk.Label(root, text=\"Nombre\", **label_style)\nlabel_nombre.grid(row=0, column=0, padx=10, pady=5)\n# insertar nombre\n# primero la entrada * estilo creado antes\nentry_nombre = tk.Entry(root, **entry_style)\nentry_nombre.grid(row=0, column=1, padx=10, pady=5)  # grid y es donde ira\nlabel_edad = tk.Label(root, text=\"Edad\", **label_style)\nlabel_edad.grid(row=1, column=0, padx=10, pady=5)",
        "detail": "formulario1.formulas",
        "documentation": {}
    },
    {
        "label": "label_nombre",
        "kind": 5,
        "importPath": "formulario1.formulas",
        "description": "formulario1.formulas",
        "peekOfCode": "label_nombre = tk.Label(root, text=\"Nombre\", **label_style)\nlabel_nombre.grid(row=0, column=0, padx=10, pady=5)\n# insertar nombre\n# primero la entrada * estilo creado antes\nentry_nombre = tk.Entry(root, **entry_style)\nentry_nombre.grid(row=0, column=1, padx=10, pady=5)  # grid y es donde ira\nlabel_edad = tk.Label(root, text=\"Edad\", **label_style)\nlabel_edad.grid(row=1, column=0, padx=10, pady=5)\nentry_edad = tk.Entry(root, **entry_style)\nentry_edad.grid(row=1, column=1, padx=10, pady=5)",
        "detail": "formulario1.formulas",
        "documentation": {}
    },
    {
        "label": "entry_nombre",
        "kind": 5,
        "importPath": "formulario1.formulas",
        "description": "formulario1.formulas",
        "peekOfCode": "entry_nombre = tk.Entry(root, **entry_style)\nentry_nombre.grid(row=0, column=1, padx=10, pady=5)  # grid y es donde ira\nlabel_edad = tk.Label(root, text=\"Edad\", **label_style)\nlabel_edad.grid(row=1, column=0, padx=10, pady=5)\nentry_edad = tk.Entry(root, **entry_style)\nentry_edad.grid(row=1, column=1, padx=10, pady=5)\nlabel_mail = tk.Label(root, text=\"Mail\", **label_style)\nlabel_mail.grid(row=2, column=0, padx=10, pady=5)\nentry_mail = tk.Entry(root, **entry_style)\nentry_mail.grid(row=2, column=1, padx=10, pady=5)",
        "detail": "formulario1.formulas",
        "documentation": {}
    },
    {
        "label": "label_edad",
        "kind": 5,
        "importPath": "formulario1.formulas",
        "description": "formulario1.formulas",
        "peekOfCode": "label_edad = tk.Label(root, text=\"Edad\", **label_style)\nlabel_edad.grid(row=1, column=0, padx=10, pady=5)\nentry_edad = tk.Entry(root, **entry_style)\nentry_edad.grid(row=1, column=1, padx=10, pady=5)\nlabel_mail = tk.Label(root, text=\"Mail\", **label_style)\nlabel_mail.grid(row=2, column=0, padx=10, pady=5)\nentry_mail = tk.Entry(root, **entry_style)\nentry_mail.grid(row=2, column=1, padx=10, pady=5)\nlabel_telefono = tk.Label(root, text=\"Telefono\", **label_style)\nlabel_telefono.grid(row=3, column=0, padx=10, pady=5)",
        "detail": "formulario1.formulas",
        "documentation": {}
    },
    {
        "label": "entry_edad",
        "kind": 5,
        "importPath": "formulario1.formulas",
        "description": "formulario1.formulas",
        "peekOfCode": "entry_edad = tk.Entry(root, **entry_style)\nentry_edad.grid(row=1, column=1, padx=10, pady=5)\nlabel_mail = tk.Label(root, text=\"Mail\", **label_style)\nlabel_mail.grid(row=2, column=0, padx=10, pady=5)\nentry_mail = tk.Entry(root, **entry_style)\nentry_mail.grid(row=2, column=1, padx=10, pady=5)\nlabel_telefono = tk.Label(root, text=\"Telefono\", **label_style)\nlabel_telefono.grid(row=3, column=0, padx=10, pady=5)\nentry_telefono = tk.Entry(root, **entry_style)\nentry_telefono.grid(row=3, column=1, padx=10, pady=5)",
        "detail": "formulario1.formulas",
        "documentation": {}
    },
    {
        "label": "label_mail",
        "kind": 5,
        "importPath": "formulario1.formulas",
        "description": "formulario1.formulas",
        "peekOfCode": "label_mail = tk.Label(root, text=\"Mail\", **label_style)\nlabel_mail.grid(row=2, column=0, padx=10, pady=5)\nentry_mail = tk.Entry(root, **entry_style)\nentry_mail.grid(row=2, column=1, padx=10, pady=5)\nlabel_telefono = tk.Label(root, text=\"Telefono\", **label_style)\nlabel_telefono.grid(row=3, column=0, padx=10, pady=5)\nentry_telefono = tk.Entry(root, **entry_style)\nentry_telefono.grid(row=3, column=1, padx=10, pady=5)\nlabel_direccion = tk.Label(root, text=\"Direccion\", **label_style)\nlabel_direccion.grid(row=4, column=0, padx=10, pady=5)",
        "detail": "formulario1.formulas",
        "documentation": {}
    },
    {
        "label": "entry_mail",
        "kind": 5,
        "importPath": "formulario1.formulas",
        "description": "formulario1.formulas",
        "peekOfCode": "entry_mail = tk.Entry(root, **entry_style)\nentry_mail.grid(row=2, column=1, padx=10, pady=5)\nlabel_telefono = tk.Label(root, text=\"Telefono\", **label_style)\nlabel_telefono.grid(row=3, column=0, padx=10, pady=5)\nentry_telefono = tk.Entry(root, **entry_style)\nentry_telefono.grid(row=3, column=1, padx=10, pady=5)\nlabel_direccion = tk.Label(root, text=\"Direccion\", **label_style)\nlabel_direccion.grid(row=4, column=0, padx=10, pady=5)\nentry_direccion = tk.Entry(root, **entry_style)\nentry_direccion.grid(row=4, column=1, padx=10, pady=5)",
        "detail": "formulario1.formulas",
        "documentation": {}
    },
    {
        "label": "label_telefono",
        "kind": 5,
        "importPath": "formulario1.formulas",
        "description": "formulario1.formulas",
        "peekOfCode": "label_telefono = tk.Label(root, text=\"Telefono\", **label_style)\nlabel_telefono.grid(row=3, column=0, padx=10, pady=5)\nentry_telefono = tk.Entry(root, **entry_style)\nentry_telefono.grid(row=3, column=1, padx=10, pady=5)\nlabel_direccion = tk.Label(root, text=\"Direccion\", **label_style)\nlabel_direccion.grid(row=4, column=0, padx=10, pady=5)\nentry_direccion = tk.Entry(root, **entry_style)\nentry_direccion.grid(row=4, column=1, padx=10, pady=5)\nboton_guardar = tk.Button(root, text=\"Guardar\",\n                          command=guardar_datos, bg='#6D8299', fg='white')",
        "detail": "formulario1.formulas",
        "documentation": {}
    },
    {
        "label": "entry_telefono",
        "kind": 5,
        "importPath": "formulario1.formulas",
        "description": "formulario1.formulas",
        "peekOfCode": "entry_telefono = tk.Entry(root, **entry_style)\nentry_telefono.grid(row=3, column=1, padx=10, pady=5)\nlabel_direccion = tk.Label(root, text=\"Direccion\", **label_style)\nlabel_direccion.grid(row=4, column=0, padx=10, pady=5)\nentry_direccion = tk.Entry(root, **entry_style)\nentry_direccion.grid(row=4, column=1, padx=10, pady=5)\nboton_guardar = tk.Button(root, text=\"Guardar\",\n                          command=guardar_datos, bg='#6D8299', fg='white')\nboton_guardar.grid(row=5, column=0, columnspan=2, padx=10, pady=10)\nroot.mainloop()",
        "detail": "formulario1.formulas",
        "documentation": {}
    },
    {
        "label": "label_direccion",
        "kind": 5,
        "importPath": "formulario1.formulas",
        "description": "formulario1.formulas",
        "peekOfCode": "label_direccion = tk.Label(root, text=\"Direccion\", **label_style)\nlabel_direccion.grid(row=4, column=0, padx=10, pady=5)\nentry_direccion = tk.Entry(root, **entry_style)\nentry_direccion.grid(row=4, column=1, padx=10, pady=5)\nboton_guardar = tk.Button(root, text=\"Guardar\",\n                          command=guardar_datos, bg='#6D8299', fg='white')\nboton_guardar.grid(row=5, column=0, columnspan=2, padx=10, pady=10)\nroot.mainloop()",
        "detail": "formulario1.formulas",
        "documentation": {}
    },
    {
        "label": "entry_direccion",
        "kind": 5,
        "importPath": "formulario1.formulas",
        "description": "formulario1.formulas",
        "peekOfCode": "entry_direccion = tk.Entry(root, **entry_style)\nentry_direccion.grid(row=4, column=1, padx=10, pady=5)\nboton_guardar = tk.Button(root, text=\"Guardar\",\n                          command=guardar_datos, bg='#6D8299', fg='white')\nboton_guardar.grid(row=5, column=0, columnspan=2, padx=10, pady=10)\nroot.mainloop()",
        "detail": "formulario1.formulas",
        "documentation": {}
    },
    {
        "label": "boton_guardar",
        "kind": 5,
        "importPath": "formulario1.formulas",
        "description": "formulario1.formulas",
        "peekOfCode": "boton_guardar = tk.Button(root, text=\"Guardar\",\n                          command=guardar_datos, bg='#6D8299', fg='white')\nboton_guardar.grid(row=5, column=0, columnspan=2, padx=10, pady=10)\nroot.mainloop()",
        "detail": "formulario1.formulas",
        "documentation": {}
    },
    {
        "label": "nombre_curso",
        "kind": 5,
        "importPath": "python.tipos.01-variables",
        "description": "python.tipos.01-variables",
        "peekOfCode": "nombre_curso = \"Ultimate Python\"\nnomre1 = \"Ultimate\"\nnombrecurso = \"Feliz\"\nprint(nombre_curso, nomre1, nombrecurso)\nalumnos = 5000\npuntaje = 9.9\npublicado = True",
        "detail": "python.tipos.01-variables",
        "documentation": {}
    },
    {
        "label": "nomre1",
        "kind": 5,
        "importPath": "python.tipos.01-variables",
        "description": "python.tipos.01-variables",
        "peekOfCode": "nomre1 = \"Ultimate\"\nnombrecurso = \"Feliz\"\nprint(nombre_curso, nomre1, nombrecurso)\nalumnos = 5000\npuntaje = 9.9\npublicado = True",
        "detail": "python.tipos.01-variables",
        "documentation": {}
    },
    {
        "label": "nombrecurso",
        "kind": 5,
        "importPath": "python.tipos.01-variables",
        "description": "python.tipos.01-variables",
        "peekOfCode": "nombrecurso = \"Feliz\"\nprint(nombre_curso, nomre1, nombrecurso)\nalumnos = 5000\npuntaje = 9.9\npublicado = True",
        "detail": "python.tipos.01-variables",
        "documentation": {}
    },
    {
        "label": "alumnos",
        "kind": 5,
        "importPath": "python.tipos.01-variables",
        "description": "python.tipos.01-variables",
        "peekOfCode": "alumnos = 5000\npuntaje = 9.9\npublicado = True",
        "detail": "python.tipos.01-variables",
        "documentation": {}
    },
    {
        "label": "puntaje",
        "kind": 5,
        "importPath": "python.tipos.01-variables",
        "description": "python.tipos.01-variables",
        "peekOfCode": "puntaje = 9.9\npublicado = True",
        "detail": "python.tipos.01-variables",
        "documentation": {}
    },
    {
        "label": "publicado",
        "kind": 5,
        "importPath": "python.tipos.01-variables",
        "description": "python.tipos.01-variables",
        "peekOfCode": "publicado = True",
        "detail": "python.tipos.01-variables",
        "documentation": {}
    },
    {
        "label": "nombre_curso",
        "kind": 5,
        "importPath": "python.tipos.02-strings",
        "description": "python.tipos.02-strings",
        "peekOfCode": "nombre_curso = \"Ultimate python\"\ndescripcion_curso = \"\"\"\nUltimate python,\neste curso contempla todos los detalles que necesitas\npara aprender como programador.\n\"\"\"\nprint(len(nombre_curso))\nprint(nombre_curso[0])\nprint(nombre_curso[0:8])\nprint(nombre_curso[9:])",
        "detail": "python.tipos.02-strings",
        "documentation": {}
    },
    {
        "label": "descripcion_curso",
        "kind": 5,
        "importPath": "python.tipos.02-strings",
        "description": "python.tipos.02-strings",
        "peekOfCode": "descripcion_curso = \"\"\"\nUltimate python,\neste curso contempla todos los detalles que necesitas\npara aprender como programador.\n\"\"\"\nprint(len(nombre_curso))\nprint(nombre_curso[0])\nprint(nombre_curso[0:8])\nprint(nombre_curso[9:])\nprint(nombre_curso[:8])",
        "detail": "python.tipos.02-strings",
        "documentation": {}
    },
    {
        "label": "nombre",
        "kind": 5,
        "importPath": "python.tipos.03.Format_strings",
        "description": "python.tipos.03.Format_strings",
        "peekOfCode": "nombre = \"Ivan\"\napellido = \"Angeles\"\nnombre_completo = f\"{nombre} {apellido}\"\nprint(nombre_completo)",
        "detail": "python.tipos.03.Format_strings",
        "documentation": {}
    },
    {
        "label": "apellido",
        "kind": 5,
        "importPath": "python.tipos.03.Format_strings",
        "description": "python.tipos.03.Format_strings",
        "peekOfCode": "apellido = \"Angeles\"\nnombre_completo = f\"{nombre} {apellido}\"\nprint(nombre_completo)",
        "detail": "python.tipos.03.Format_strings",
        "documentation": {}
    },
    {
        "label": "nombre_completo",
        "kind": 5,
        "importPath": "python.tipos.03.Format_strings",
        "description": "python.tipos.03.Format_strings",
        "peekOfCode": "nombre_completo = f\"{nombre} {apellido}\"\nprint(nombre_completo)",
        "detail": "python.tipos.03.Format_strings",
        "documentation": {}
    },
    {
        "label": "animal",
        "kind": 5,
        "importPath": "python.tipos.04-metodos_strings",
        "description": "python.tipos.04-metodos_strings",
        "peekOfCode": "animal = \"  chanCHito feliz      \"\nprint(animal.upper())\nprint(animal.lower())\nprint(animal.strip().capitalize())\nprint(animal.title())\nprint(animal.strip())\nprint(animal.find(\"CH\"))\nprint(animal.replace(\"nCH\", \"j\"))\nprint(\"nCH\" in animal)",
        "detail": "python.tipos.04-metodos_strings",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "python.Untitled-1",
        "description": "python.Untitled-1",
        "peekOfCode": "x = 5\ny = \"John\"\nprint(x)  # se pueden cambiar de valor\nprint(y)\nx = str(3)    # x will be '3'\ny = int(3)    # y will be 3\nz = float(3)  # z will be 3.0 tienes que declarar el tipo de variable\nA = 4748934\na = \"dos\"\nprint(a)",
        "detail": "python.Untitled-1",
        "documentation": {}
    },
    {
        "label": "y",
        "kind": 5,
        "importPath": "python.Untitled-1",
        "description": "python.Untitled-1",
        "peekOfCode": "y = \"John\"\nprint(x)  # se pueden cambiar de valor\nprint(y)\nx = str(3)    # x will be '3'\ny = int(3)    # y will be 3\nz = float(3)  # z will be 3.0 tienes que declarar el tipo de variable\nA = 4748934\na = \"dos\"\nprint(a)\nprint(a, A)",
        "detail": "python.Untitled-1",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "python.Untitled-1",
        "description": "python.Untitled-1",
        "peekOfCode": "x = str(3)    # x will be '3'\ny = int(3)    # y will be 3\nz = float(3)  # z will be 3.0 tienes que declarar el tipo de variable\nA = 4748934\na = \"dos\"\nprint(a)\nprint(a, A)\nx, y, z = \"uno\", \"dois\", \"treis\"\nprint(x)\nprint(y)",
        "detail": "python.Untitled-1",
        "documentation": {}
    },
    {
        "label": "y",
        "kind": 5,
        "importPath": "python.Untitled-1",
        "description": "python.Untitled-1",
        "peekOfCode": "y = int(3)    # y will be 3\nz = float(3)  # z will be 3.0 tienes que declarar el tipo de variable\nA = 4748934\na = \"dos\"\nprint(a)\nprint(a, A)\nx, y, z = \"uno\", \"dois\", \"treis\"\nprint(x)\nprint(y)\nprint(z)",
        "detail": "python.Untitled-1",
        "documentation": {}
    },
    {
        "label": "z",
        "kind": 5,
        "importPath": "python.Untitled-1",
        "description": "python.Untitled-1",
        "peekOfCode": "z = float(3)  # z will be 3.0 tienes que declarar el tipo de variable\nA = 4748934\na = \"dos\"\nprint(a)\nprint(a, A)\nx, y, z = \"uno\", \"dois\", \"treis\"\nprint(x)\nprint(y)\nprint(z)\nx = y = z = \"dieciveinte\"",
        "detail": "python.Untitled-1",
        "documentation": {}
    },
    {
        "label": "A",
        "kind": 5,
        "importPath": "python.Untitled-1",
        "description": "python.Untitled-1",
        "peekOfCode": "A = 4748934\na = \"dos\"\nprint(a)\nprint(a, A)\nx, y, z = \"uno\", \"dois\", \"treis\"\nprint(x)\nprint(y)\nprint(z)\nx = y = z = \"dieciveinte\"\nprint(x, y, z)",
        "detail": "python.Untitled-1",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "python.Untitled-1",
        "description": "python.Untitled-1",
        "peekOfCode": "a = \"dos\"\nprint(a)\nprint(a, A)\nx, y, z = \"uno\", \"dois\", \"treis\"\nprint(x)\nprint(y)\nprint(z)\nx = y = z = \"dieciveinte\"\nprint(x, y, z)\nfrutas = (\"primera\", \"segunda\", \"tercera\")",
        "detail": "python.Untitled-1",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "python.Untitled-1",
        "description": "python.Untitled-1",
        "peekOfCode": "x = y = z = \"dieciveinte\"\nprint(x, y, z)\nfrutas = (\"primera\", \"segunda\", \"tercera\")\nx, y, z = frutas\nprint(z)\nx = 5\ny = \"ivan\"\nprint(x, y)\nprint(x, y, x)",
        "detail": "python.Untitled-1",
        "documentation": {}
    },
    {
        "label": "frutas",
        "kind": 5,
        "importPath": "python.Untitled-1",
        "description": "python.Untitled-1",
        "peekOfCode": "frutas = (\"primera\", \"segunda\", \"tercera\")\nx, y, z = frutas\nprint(z)\nx = 5\ny = \"ivan\"\nprint(x, y)\nprint(x, y, x)",
        "detail": "python.Untitled-1",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "python.Untitled-1",
        "description": "python.Untitled-1",
        "peekOfCode": "x = 5\ny = \"ivan\"\nprint(x, y)\nprint(x, y, x)",
        "detail": "python.Untitled-1",
        "documentation": {}
    },
    {
        "label": "y",
        "kind": 5,
        "importPath": "python.Untitled-1",
        "description": "python.Untitled-1",
        "peekOfCode": "y = \"ivan\"\nprint(x, y)\nprint(x, y, x)",
        "detail": "python.Untitled-1",
        "documentation": {}
    },
    {
        "label": "chanchito",
        "kind": 5,
        "importPath": "python.format",
        "description": "python.format",
        "peekOfCode": "chanchito = \"Feliz\"\na = 12\nb = 13",
        "detail": "python.format",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "python.format",
        "description": "python.format",
        "peekOfCode": "a = 12\nb = 13",
        "detail": "python.format",
        "documentation": {}
    },
    {
        "label": "b",
        "kind": 5,
        "importPath": "python.format",
        "description": "python.format",
        "peekOfCode": "b = 13",
        "detail": "python.format",
        "documentation": {}
    },
    {
        "label": "face_cascade",
        "kind": 5,
        "importPath": "reconocimiento facial.carros",
        "description": "reconocimiento facial.carros",
        "peekOfCode": "face_cascade = cv2.CascadeClassifier('cars.xml')\ncap = cv2.VideoCapture(1)\nwhile True:\n    _, img = cap.read()\n    gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)\n    faces = face_cascade.detectMultiScale(gray, 1.1, 4)\n    for (x, y, w, h) in faces:\n        cv2.rectangle(img, (x, y), (x+w, y+h), (255, 0, 0), 2)\n        cv2.imshow('img', img)\n    k = cv2.waitKey(30)",
        "detail": "reconocimiento facial.carros",
        "documentation": {}
    },
    {
        "label": "cap",
        "kind": 5,
        "importPath": "reconocimiento facial.carros",
        "description": "reconocimiento facial.carros",
        "peekOfCode": "cap = cv2.VideoCapture(1)\nwhile True:\n    _, img = cap.read()\n    gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)\n    faces = face_cascade.detectMultiScale(gray, 1.1, 4)\n    for (x, y, w, h) in faces:\n        cv2.rectangle(img, (x, y), (x+w, y+h), (255, 0, 0), 2)\n        cv2.imshow('img', img)\n    k = cv2.waitKey(30)\n    if k == 27:",
        "detail": "reconocimiento facial.carros",
        "documentation": {}
    },
    {
        "label": "face_cascade",
        "kind": 5,
        "importPath": "reconocimiento facial.reconocimentofacial",
        "description": "reconocimiento facial.reconocimentofacial",
        "peekOfCode": "face_cascade = cv2.CascadeClassifier('haarcascade_frontalface_default.xml')\ncap = cv2.VideoCapture(0)\nwhile True:\n    _, img = cap.read()\n    gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)\n    faces = face_cascade.detectMultiScale(gray, 1.1, 4)\n    for (x, y, w, h) in faces:\n        cv2.rectangle(img, (x, y), (x+w, y+h), (255, 0, 0), 2)\n        cv2.imshow('img', img)\n    k = cv2.waitKey(30)",
        "detail": "reconocimiento facial.reconocimentofacial",
        "documentation": {}
    },
    {
        "label": "cap",
        "kind": 5,
        "importPath": "reconocimiento facial.reconocimentofacial",
        "description": "reconocimiento facial.reconocimentofacial",
        "peekOfCode": "cap = cv2.VideoCapture(0)\nwhile True:\n    _, img = cap.read()\n    gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)\n    faces = face_cascade.detectMultiScale(gray, 1.1, 4)\n    for (x, y, w, h) in faces:\n        cv2.rectangle(img, (x, y), (x+w, y+h), (255, 0, 0), 2)\n        cv2.imshow('img', img)\n    k = cv2.waitKey(30)\n    if k == 27:",
        "detail": "reconocimiento facial.reconocimentofacial",
        "documentation": {}
    }
]